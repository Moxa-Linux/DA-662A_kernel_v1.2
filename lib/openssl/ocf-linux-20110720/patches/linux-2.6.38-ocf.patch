diff -u -r1.1.1.31 -r1.7
--- linux-2.6.38/kernel/pid.c	5 Jan 2011 04:28:04 -0000	1.1.1.31
+++ linux-2.6.38/kernel/pid.c	5 Jan 2011 05:20:18 -0000	1.7
@@ -424,6 +424,7 @@
 {
 	return find_task_by_pid_ns(vnr, current->nsproxy->pid_ns);
 }
+EXPORT_SYMBOL(find_task_by_vpid);
 
 struct pid *get_task_pid(struct task_struct *task, enum pid_type type)
 {
diff -u -r1.1.1.51 -r1.18
--- linux-2.6.38/drivers/char/random.c	15 Mar 2011 22:12:51 -0000	1.1.1.51
+++ linux-2.6.38/drivers/char/random.c	16 Mar 2011 04:12:24 -0000	1.18
@@ -129,6 +129,9 @@
  *                                unsigned int value);
  * 	void add_interrupt_randomness(int irq);
  *
+ *      void random_input_words(__u32 *buf, size_t wordcount, int ent_count)
+ *      int random_input_wait(void);
+ *
  * add_input_randomness() uses the input layer interrupt timing, as well as
  * the event type information from the hardware.
  *
@@ -140,6 +143,13 @@
  * a better measure, since the timing of the disk interrupts are more
  * unpredictable.
  *
+ * random_input_words() just provides a raw block of entropy to the input
+ * pool, such as from a hardware entropy generator.
+ *
+ * random_input_wait() suspends the caller until such time as the
+ * entropy pool falls below the write threshold, and returns a count of how
+ * much entropy (in bits) is needed to sustain the pool.
+ *
  * All of these routines try to estimate how many bits of randomness a
  * particular randomness source.  They do this by keeping track of the
  * first and second order deltas of the event timings.
@@ -715,6 +725,63 @@
 }
 #endif
 
+/*
+ * random_input_words - add bulk entropy to pool
+ *
+ * @buf: buffer to add
+ * @wordcount: number of __u32 words to add
+ * @ent_count: total amount of entropy (in bits) to credit
+ *
+ * this provides bulk input of entropy to the input pool
+ *
+ */
+void random_input_words(__u32 *buf, size_t wordcount, int ent_count)
+{
+	mix_pool_bytes(&input_pool, buf, wordcount*4);
+
+	credit_entropy_bits(&input_pool, ent_count);
+
+	DEBUG_ENT("crediting %d bits => %d\n",
+		  ent_count, input_pool.entropy_count);
+	/*
+	 * Wake up waiting processes if we have enough
+	 * entropy.
+	 */
+	if (input_pool.entropy_count >= random_read_wakeup_thresh)
+		wake_up_interruptible(&random_read_wait);
+}
+EXPORT_SYMBOL(random_input_words);
+
+/*
+ * random_input_wait - wait until random needs entropy
+ *
+ * this function sleeps until the /dev/random subsystem actually
+ * needs more entropy, and then return the amount of entropy
+ * that it would be nice to have added to the system.
+ */
+int random_input_wait(void)
+{
+	int count;
+
+	wait_event_interruptible(random_write_wait, 
+			 input_pool.entropy_count < random_write_wakeup_thresh);
+
+	count = random_write_wakeup_thresh - input_pool.entropy_count;
+
+        /* likely we got woken up due to a signal */
+	if (count <= 0) count = random_read_wakeup_thresh; 
+
+	DEBUG_ENT("requesting %d bits from input_wait()er %d<%d\n",
+		  count,
+		  input_pool.entropy_count, random_write_wakeup_thresh);
+
+	return count;
+}
+EXPORT_SYMBOL(random_input_wait);
+
+
+#define EXTRACT_SIZE 10
+
 /*********************************************************************
  *
  * Entropy extraction routines
diff -u -r1.1.1.49 -r1.15
--- linux-2.6.38/fs/fcntl.c	15 Mar 2011 21:35:51 -0000	1.1.1.49
+++ linux-2.6.38/fs/fcntl.c	16 Mar 2011 04:12:31 -0000	1.15
@@ -142,6 +142,7 @@
 	}
 	return ret;
 }
+EXPORT_SYMBOL(sys_dup);
 
 #define SETFL_MASK (O_APPEND | O_NONBLOCK | O_NDELAY | O_DIRECT | O_NOATIME)
 
diff -u -r1.1.1.23 -r1.16
--- linux-2.6.38/include/linux/miscdevice.h	21 Oct 2010 00:38:07 -0000	1.1.1.23
+++ linux-2.6.38/include/linux/miscdevice.h	21 Oct 2010 02:02:26 -0000	1.16
@@ -18,6 +18,7 @@
 #define APOLLO_MOUSE_MINOR	7
 #define PC110PAD_MINOR		9
 /*#define ADB_MOUSE_MINOR	10	FIXME OBSOLETE */
+#define CRYPTODEV_MINOR		70	/* /dev/crypto */
 #define WATCHDOG_MINOR		130	/* Watchdog timer     */
 #define TEMP_MINOR		131	/* Temperature Sensor */
 #define RTC_MINOR		135
diff -u -r1.1.1.14 random.h
--- linux-2.6.38/include/linux/random.h	12 Aug 2010 00:16:26 -0000	1.1.1.14
+++ linux-2.6.38/include/linux/random.h	31 Mar 2011 04:12:25 -0000
@@ -54,6 +54,10 @@
 				 unsigned int value);
 extern void add_interrupt_randomness(int irq);
 
+extern void random_input_words(__u32 *buf, size_t wordcount, int ent_count);
+extern int random_input_wait(void);
+#define HAS_RANDOM_INPUT_WAIT 1
+
 extern void get_random_bytes(void *buf, int nbytes);
 void generate_random_uuid(unsigned char uuid_out[16]);
 
diff -u -r1.1.1.41 Kconfig
--- linux-2.6.38/crypto/Kconfig	15 Mar 2011 22:45:54 -0000	1.1.1.41
+++ linux-2.6.38/crypto/Kconfig	31 Mar 2011 04:12:25 -0000
@@ -866,3 +866,6 @@
 source "drivers/crypto/Kconfig"
 
 endif	# if CRYPTO
+
+source "crypto/ocf/Kconfig"
+
diff -u -r1.1.1.32 Makefile
--- linux-2.6.38/crypto/Makefile	15 Mar 2011 22:45:39 -0000	1.1.1.32
+++ linux-2.6.38/crypto/Makefile	31 Mar 2011 04:12:25 -0000
@@ -89,6 +89,8 @@
 obj-$(CONFIG_CRYPTO_USER_API_HASH) += algif_hash.o
 obj-$(CONFIG_CRYPTO_USER_API_SKCIPHER) += algif_skcipher.o
 
+obj-$(CONFIG_OCF_OCF) += ocf/
+
 #
 # generic algorithms and the async_tx api
 #
