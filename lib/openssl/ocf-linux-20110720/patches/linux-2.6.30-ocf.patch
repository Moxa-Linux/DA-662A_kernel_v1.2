diff -Nru linux-2.6.30.orig/crypto/Kconfig linux-2.6.30/crypto/Kconfig
--- linux-2.6.30.orig/crypto/Kconfig	2009-06-10 13:05:27.000000000 +1000
+++ linux-2.6.30/crypto/Kconfig	2009-09-01 11:43:39.000000000 +1000
@@ -781,3 +781,6 @@
 source "drivers/crypto/Kconfig"
 
 endif	# if CRYPTO
+
+source "crypto/ocf/Kconfig"
+
diff -Nru linux-2.6.30.orig/crypto/Makefile linux-2.6.30/crypto/Makefile
--- linux-2.6.30.orig/crypto/Makefile	2009-06-10 13:05:27.000000000 +1000
+++ linux-2.6.30/crypto/Makefile	2009-09-01 11:43:39.000000000 +1000
@@ -84,6 +84,8 @@
 obj-$(CONFIG_CRYPTO_ANSI_CPRNG) += ansi_cprng.o
 obj-$(CONFIG_CRYPTO_TEST) += tcrypt.o
 
+obj-$(CONFIG_OCF_OCF) += ocf/
+
 #
 # generic algorithms and the async_tx api
 #
diff -Nru linux-2.6.30.orig/drivers/char/random.c linux-2.6.30/drivers/char/random.c
--- linux-2.6.30.orig/drivers/char/random.c	2009-06-10 13:05:27.000000000 +1000
+++ linux-2.6.30/drivers/char/random.c	2009-09-01 11:43:39.000000000 +1000
@@ -129,6 +129,9 @@
  *                                unsigned int value);
  * 	void add_interrupt_randomness(int irq);
  *
+ *      void random_input_words(__u32 *buf, size_t wordcount, int ent_count)
+ *      int random_input_wait(void);
+ *
  * add_input_randomness() uses the input layer interrupt timing, as well as
  * the event type information from the hardware.
  *
@@ -140,6 +143,13 @@
  * a better measure, since the timing of the disk interrupts are more
  * unpredictable.
  *
+ * random_input_words() just provides a raw block of entropy to the input
+ * pool, such as from a hardware entropy generator.
+ *
+ * random_input_wait() suspends the caller until such time as the
+ * entropy pool falls below the write threshold, and returns a count of how
+ * much entropy (in bits) is needed to sustain the pool.
+ *
  * All of these routines try to estimate how many bits of randomness a
  * particular randomness source.  They do this by keeping track of the
  * first and second order deltas of the event timings.
@@ -712,6 +722,61 @@
 }
 #endif
 
+/*
+ * random_input_words - add bulk entropy to pool
+ *
+ * @buf: buffer to add
+ * @wordcount: number of __u32 words to add
+ * @ent_count: total amount of entropy (in bits) to credit
+ *
+ * this provides bulk input of entropy to the input pool
+ *
+ */
+void random_input_words(__u32 *buf, size_t wordcount, int ent_count)
+{
+	mix_pool_bytes(&input_pool, buf, wordcount*4);
+
+	credit_entropy_bits(&input_pool, ent_count);
+
+	DEBUG_ENT("crediting %d bits => %d\n",
+		  ent_count, input_pool.entropy_count);
+	/*
+	 * Wake up waiting processes if we have enough
+	 * entropy.
+	 */
+	if (input_pool.entropy_count >= random_read_wakeup_thresh)
+		wake_up_interruptible(&random_read_wait);
+}
+EXPORT_SYMBOL(random_input_words);
+
+/*
+ * random_input_wait - wait until random needs entropy
+ *
+ * this function sleeps until the /dev/random subsystem actually
+ * needs more entropy, and then return the amount of entropy
+ * that it would be nice to have added to the system.
+ */
+int random_input_wait(void)
+{
+	int count;
+
+	wait_event_interruptible(random_write_wait, 
+			 input_pool.entropy_count < random_write_wakeup_thresh);
+
+	count = random_write_wakeup_thresh - input_pool.entropy_count;
+
+        /* likely we got woken up due to a signal */
+	if (count <= 0) count = random_read_wakeup_thresh; 
+
+	DEBUG_ENT("requesting %d bits from input_wait()er %d<%d\n",
+		  count,
+		  input_pool.entropy_count, random_write_wakeup_thresh);
+
+	return count;
+}
+EXPORT_SYMBOL(random_input_wait);
+
+
 #define EXTRACT_SIZE 10
 
 /*********************************************************************
diff -Nru linux-2.6.30.orig/fs/fcntl.c linux-2.6.30/fs/fcntl.c
--- linux-2.6.30.orig/fs/fcntl.c	2009-06-10 13:05:27.000000000 +1000
+++ linux-2.6.30/fs/fcntl.c	2009-09-01 11:43:39.000000000 +1000
@@ -196,6 +196,7 @@
  out:
 	return error;
 }
+EXPORT_SYMBOL(sys_dup);
 
 static void f_modown(struct file *filp, struct pid *pid, enum pid_type type,
                      uid_t uid, uid_t euid, int force)
diff -Nru linux-2.6.30.orig/include/linux/miscdevice.h linux-2.6.30/include/linux/miscdevice.h
--- linux-2.6.30.orig/include/linux/miscdevice.h	2009-06-10 13:05:27.000000000 +1000
+++ linux-2.6.30/include/linux/miscdevice.h	2009-09-01 11:44:16.000000000 +1000
@@ -12,6 +12,7 @@
 #define APOLLO_MOUSE_MINOR	7
 #define PC110PAD_MINOR		9
 /*#define ADB_MOUSE_MINOR	10	FIXME OBSOLETE */
+#define CRYPTODEV_MINOR		70	/* /dev/crypto */
 #define WATCHDOG_MINOR		130	/* Watchdog timer     */
 #define TEMP_MINOR		131	/* Temperature Sensor */
 #define RTC_MINOR		135
diff -Nru linux-2.6.30.orig/include/linux/random.h linux-2.6.30/include/linux/random.h
--- linux-2.6.30.orig/include/linux/random.h	2009-06-10 13:05:27.000000000 +1000
+++ linux-2.6.30/include/linux/random.h	2009-09-01 11:43:39.000000000 +1000
@@ -50,6 +50,10 @@
 				 unsigned int value);
 extern void add_interrupt_randomness(int irq);
 
+extern void random_input_words(__u32 *buf, size_t wordcount, int ent_count);
+extern int random_input_wait(void);
+#define HAS_RANDOM_INPUT_WAIT 1
+
 extern void get_random_bytes(void *buf, int nbytes);
 void generate_random_uuid(unsigned char uuid_out[16]);
 
diff -Nru linux-2.6.30.orig/kernel/pid.c linux-2.6.30/kernel/pid.c
--- linux-2.6.30.orig/kernel/pid.c	7 Dec 2009 06:41:53 -0000
+++ linux-2.6.30/kernel/pid.c	8 Dec 2009 08:18:31 -0000
@@ -387,6 +387,7 @@
 {
 	return find_task_by_pid_ns(vnr, current->nsproxy->pid_ns);
 }
+EXPORT_SYMBOL(find_task_by_vpid);
 
 struct pid *get_task_pid(struct task_struct *task, enum pid_type type)
 {
